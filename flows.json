[
    {
        "id": "31dc9212167bc6cf",
        "type": "tab",
        "label": "Partly Payload Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ce5a33d1bf90db0",
        "type": "junction",
        "z": "31dc9212167bc6cf",
        "x": 860,
        "y": 640,
        "wires": [
            [
                "bb1811a1a179d576",
                "5186a267f1800790"
            ]
        ]
    },
    {
        "id": "0f42b3d3d51b97d7",
        "type": "tls-config",
        "name": "TZ Monitor 9.0.4",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "masdev.messaging.iot.inst1.apps.a2e22b676ff.ocp.techzone.ibm.com",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "d884a172f432396b",
        "type": "mqtt-broker",
        "name": "TZ Monitor 9.0.4",
        "broker": "masdev.messaging.iot.inst1.apps.a2e22b676ff.ocp.techzone.ibm.com",
        "port": "443",
        "tls": "0f42b3d3d51b97d7",
        "clientid": "d:masdev:device:device_one",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "15",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e2db722427e0be6c",
        "type": "link in",
        "z": "31dc9212167bc6cf",
        "name": "RPE001-CPU-01 in",
        "links": [
            "96bd61fda1ac8c14"
        ],
        "x": 85,
        "y": 620,
        "wires": [
            [
                "69d0f5c9cbf82c52"
            ]
        ]
    },
    {
        "id": "1c680202ff23bbb8",
        "type": "switch",
        "z": "31dc9212167bc6cf",
        "name": "selector ?",
        "property": "selector",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 420,
        "y": 600,
        "wires": [
            [
                "f30ab956e348a1ba"
            ],
            [
                "4573b6e09ba828fd"
            ],
            [
                "4c585b60ffd1ec40"
            ]
        ]
    },
    {
        "id": "5cf215126a139451",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Scenario 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 500,
        "wires": []
    },
    {
        "id": "68502cff59d2ba25",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Scenario 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 540,
        "wires": []
    },
    {
        "id": "12baf27511aaee46",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Scenario 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 580,
        "wires": []
    },
    {
        "id": "f30ab956e348a1ba",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "1: All",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 560,
        "wires": [
            [
                "8ce5a33d1bf90db0",
                "5cf215126a139451"
            ]
        ]
    },
    {
        "id": "4573b6e09ba828fd",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "2: Without mu",
        "func": "let payload = msg.payload;\n\n// Remove mu metric\ndelete payload.mu;\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 600,
        "wires": [
            [
                "8ce5a33d1bf90db0",
                "68502cff59d2ba25"
            ]
        ]
    },
    {
        "id": "4c585b60ffd1ec40",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "3: Only cl",
        "func": "let payload = msg.payload;\n\n// Remove mu metric\ndelete payload.mu;\ndelete payload.du;\ndelete payload.ct;\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 640,
        "wires": [
            [
                "8ce5a33d1bf90db0",
                "12baf27511aaee46"
            ]
        ]
    },
    {
        "id": "69d0f5c9cbf82c52",
        "type": "switch",
        "z": "31dc9212167bc6cf",
        "name": "Send ?",
        "property": "send",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 620,
        "wires": [
            [
                "435633d8a772f462",
                "1c680202ff23bbb8"
            ],
            [
                "67405350f2d9d930"
            ]
        ]
    },
    {
        "id": "435633d8a772f462",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 540,
        "wires": []
    },
    {
        "id": "67405350f2d9d930",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Don't Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 660,
        "wires": []
    },
    {
        "id": "027590be34d38c46",
        "type": "status",
        "z": "31dc9212167bc6cf",
        "name": "",
        "scope": [],
        "x": 140,
        "y": 760,
        "wires": [
            [
                "83cd1a881f223181",
                "bacac8d3430a051e"
            ]
        ]
    },
    {
        "id": "83cd1a881f223181",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "status",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 760,
        "wires": []
    },
    {
        "id": "bacac8d3430a051e",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "Simplify",
        "func": "let sourceName = msg.status.source.name;\nlet fill = msg.status.fill;\nconst newFill = fill[0].toUpperCase() + fill.slice(1);\n\nlet status = msg.status.text;\nconst myArray = status.split(\".\");\n\nmsg = {};\n\nlet payload = {\n    \"Node\": sourceName,\n    \"Fill\": newFill,\n    \"Status\": myArray[2].toUpperCase()\n}\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 820,
        "wires": [
            [
                "04b7a424cca32aca"
            ]
        ]
    },
    {
        "id": "04b7a424cca32aca",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Simple Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 820,
        "wires": []
    },
    {
        "id": "7afebce586f8a394",
        "type": "comment",
        "z": "31dc9212167bc6cf",
        "name": "Test of sending full or partly payloads",
        "info": "",
        "x": 190,
        "y": 500,
        "wires": []
    },
    {
        "id": "cad9b82dddc4c5bd",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "Create data",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "3bb3b4afbc17f23b",
                "07cfa4d32f34c7e3",
                "90d875a5ecbedb24",
                "b8c38b95ed45b91c",
                "b2f7116ed6cfe405"
            ]
        ]
    },
    {
        "id": "3bb3b4afbc17f23b",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "D: CPU Load (3) [2-95]",
        "func": "let upperLimit = 95;\nlet lowerLimit = 2;\nlet diff = upperLimit - lowerLimit;\nlet step = diff / 50;\nlet value = context.get('CPU_Load') || 3;\n\nlet newValue = value + ( Math.random() < 0.5 ? step : -step );\n\nif ( newValue < lowerLimit) {\n    let action = \"LL - was: \" + newValue + \"  new: \";\n    newValue = newValue + step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\nif ( newValue > upperLimit) {\n    let action = \"UL - was: \" + newValue + \"  new: \";\n    newValue = newValue - step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\n// truncate to 2 decimals\nnewValue = parseFloat(newValue.toFixed(2));\n\ncontext.set('CPU_Load', newValue);\n\n\nmsg.payload = newValue;\nmsg.topic = \"cl\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "1415ad423f3d84bb"
            ]
        ]
    },
    {
        "id": "07cfa4d32f34c7e3",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "D: CPU Temperature C (70) [60-80]",
        "func": "let upperLimit = 85;\nlet lowerLimit = 60;\nlet diff = upperLimit - lowerLimit;\nlet step = diff / 50;\nlet value = context.get('CPU_Temperature') || 70.0;\n\nlet newValue = value + ( Math.random() < 0.5 ? step : -step );\n\nif ( newValue < lowerLimit) {\n    let action = \"LL - was: \" + newValue + \"  new: \";\n    newValue = newValue + step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\nif ( newValue > upperLimit) {\n    let action = \"UL - was: \" + newValue + \"  new: \";\n    newValue = newValue - step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\n// truncate to 2 decimals\nnewValue = parseFloat(newValue.toFixed(2));\n\ncontext.set('CPU_Temperature', newValue);\n\nmsg.payload = newValue;\nmsg.topic =\"ct\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "1415ad423f3d84bb"
            ]
        ]
    },
    {
        "id": "923ae80577089475",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "DEVICE_01",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "1415ad423f3d84bb",
        "type": "join",
        "z": "31dc9212167bc6cf",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 810,
        "y": 340,
        "wires": [
            [
                "291b240e4dfa105a"
            ]
        ]
    },
    {
        "id": "90d875a5ecbedb24",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "Create timestamp",
        "func": "// Create timestamps\nlet now     = new Date();\nmsg.payload = now.toISOString();\nmsg.topic   = \"timestamp\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 440,
        "wires": [
            [
                "1415ad423f3d84bb"
            ]
        ]
    },
    {
        "id": "291b240e4dfa105a",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "set topic",
        "func": "// Define the event properties\nlet eventType = \"event\";\nlet eventFormat = \"json\";\n\n// Clean up message\nlet str = msg.payload;\nmsg = {}; \n\n// Rebuild message\nmsg.payload = str;\nmsg.topic = \"iot-2/evt/\"+eventType+\"/fmt/\"+eventFormat;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "923ae80577089475",
                "96bd61fda1ac8c14"
            ]
        ]
    },
    {
        "id": "a9122d24828ddaf2",
        "type": "comment",
        "z": "31dc9212167bc6cf",
        "name": "One simulated dynamic device connected directly to Maximo Monitor",
        "info": "",
        "x": 290,
        "y": 240,
        "wires": []
    },
    {
        "id": "b8c38b95ed45b91c",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "D: Memory Usage (50) [45-65]",
        "func": "let upperLimit = 65;\nlet lowerLimit = 45;\nlet diff = upperLimit - lowerLimit;\nlet step = diff / 50;\nlet value = context.get('Memory_Usage') || 50.0;\n\nlet newValue = value + ( Math.random() < 0.5 ? step : -step );\n\nif ( newValue < lowerLimit) {\n    let action = \"LL - was: \" + newValue + \"  new: \";\n    newValue = newValue + step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\nif ( newValue > upperLimit) {\n    let action = \"UL - was: \" + newValue + \"  new: \";\n    newValue = newValue - step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\n// truncate to 2 decimals\nnewValue = parseFloat(newValue.toFixed(2));\n\ncontext.set('Memory_Usage', newValue);\n\nmsg.payload = newValue;\nmsg.topic =\"mu\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "1415ad423f3d84bb"
            ]
        ]
    },
    {
        "id": "b2f7116ed6cfe405",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "D: Disk Usage (40) [35-45]",
        "func": "let upperLimit = 45;\nlet lowerLimit = 35;\nlet diff = upperLimit - lowerLimit;\nlet step = diff / 50;\nlet value = context.get('Disk_Usage') || 40.0;\n\nlet newValue = value + ( Math.random() < 0.5 ? step : -step );\n\nif ( newValue < lowerLimit) {\n    let action = \"LL - was: \" + newValue + \"  new: \";\n    newValue = newValue + step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\nif ( newValue > upperLimit) {\n    let action = \"UL - was: \" + newValue + \"  new: \";\n    newValue = newValue - step;\n    action = action + newValue;\n    //node.warn(action);\n}\n\n// truncate to 2 decimals\nnewValue = parseFloat(newValue.toFixed(2));\n\ncontext.set('Disk_Usage', newValue);\n\nmsg.payload = newValue;\nmsg.topic =\"du\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "1415ad423f3d84bb"
            ]
        ]
    },
    {
        "id": "96bd61fda1ac8c14",
        "type": "link out",
        "z": "31dc9212167bc6cf",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "e2db722427e0be6c"
        ],
        "x": 1115,
        "y": 340,
        "wires": []
    },
    {
        "id": "bb1811a1a179d576",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Message Send",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 640,
        "wires": []
    },
    {
        "id": "5186a267f1800790",
        "type": "mqtt out",
        "z": "31dc9212167bc6cf",
        "name": "TZ Monitor 9.0.4",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d884a172f432396b",
        "x": 1090,
        "y": 680,
        "wires": []
    },
    {
        "id": "c2c4497da9050e75",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "selector = 1",
        "props": [
            {
                "p": "selector",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "a0ded07441c30a9a"
            ]
        ]
    },
    {
        "id": "e99153cbc38e2cad",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "selector = 2",
        "props": [
            {
                "p": "selector",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 120,
        "wires": [
            [
                "a0ded07441c30a9a"
            ]
        ]
    },
    {
        "id": "f86f0ee766317ea1",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "selector = 3",
        "props": [
            {
                "p": "selector",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "a0ded07441c30a9a"
            ]
        ]
    },
    {
        "id": "a0ded07441c30a9a",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "Set selector",
        "func": "flow.set('selector', msg.selector);\n\nmsg.payload = \"Selector is set to \" + msg.selector;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "86eb2178d90c27c7"
            ]
        ]
    },
    {
        "id": "4b0c97524f2256d9",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "Don't send",
        "props": [
            {
                "p": "send",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "7b8e6888cb7d61fb"
            ]
        ]
    },
    {
        "id": "7b8e6888cb7d61fb",
        "type": "function",
        "z": "31dc9212167bc6cf",
        "name": "Set send",
        "func": "flow.set('send', msg.send);\n\nmsg.payload = \"Sending MQTT Messages is set to \" + msg.send;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "a0d6b48f56dda673"
            ]
        ]
    },
    {
        "id": "a7d04c5e46695565",
        "type": "inject",
        "z": "31dc9212167bc6cf",
        "name": "Send",
        "props": [
            {
                "p": "send",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "7b8e6888cb7d61fb"
            ]
        ]
    },
    {
        "id": "a0d6b48f56dda673",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Send Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "86eb2178d90c27c7",
        "type": "debug",
        "z": "31dc9212167bc6cf",
        "name": "Selector Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 120,
        "wires": []
    },
    {
        "id": "81f6b652d9c939eb",
        "type": "comment",
        "z": "31dc9212167bc6cf",
        "name": "Select which scenario to run (Default = 1)",
        "info": "",
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "9cf6b9701c759458",
        "type": "comment",
        "z": "31dc9212167bc6cf",
        "name": "Send message or not (Default = Don't send)",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    }
]